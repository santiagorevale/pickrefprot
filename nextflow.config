/*
 * -------------------------------------------------
 * Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 */

// Global default params, used in configs
params {
    // Pipeline Options
    // Workflow flags
    genome = false
    transcripts = false

    // References
    ref_translations = false
    ref_pfam = false
    ref_acps = false
    save_reference = true

    // Defaults
    project = false
    fasta_chunks = 1000

    // Boilerplate options
    help = false
    monochrome_logs = false
    clusterOptions = false
    outdir = './results'
    tracedir = "${params.outdir}/pipeline_info"
}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'

profiles {
    debug { process.beforeScript = 'echo $HOSTNAME' }
    conda { process.conda = "$baseDir/environment.yml" }
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
    enabled = true
    file = "${params.tracedir}/execution_timeline.html"
}
report {
    enabled = true
    file = "${params.tracedir}/execution_report.html"
}
trace {
    enabled = true
    file = "${params.tracedir}/execution_trace.txt"
}
dag {
    enabled = true
    file = "${params.tracedir}/pipeline_dag.svg"
}

manifest {
    name = 'santiagorevale/pickrepprot'
    author = 'Santiago Revale, Juan Hurtado'
    homePage = 'https://github.com/santiagorevale/pickrepprot'
    description = 'PickRepProt is a pipeline to predict a representative protein sequence per gene from transcriptomes for Drosophila species.'
    mainScript = 'main.nf'
    nextflowVersion = '>=19.04.0'
    version = '0.0.1'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
